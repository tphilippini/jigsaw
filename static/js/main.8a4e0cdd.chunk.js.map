{"version":3,"sources":["components/Grain.js","stores/contexts/themes.context.js","components/ThemeSelector.js","App.js","styles/GlobalStyle.style.js","stores/providers/themes.provider.js","index.js"],"names":["Grain","canvas","ctx","wWidth","wHeight","noiseData","frame","createNoise","idata","createImageData","buffer32","Uint32Array","data","buffer","len","length","i","Math","random","push","loop","putImageData","window","setTimeout","requestAnimationFrame","useEffect","document","getElementById","getContext","innerWidth","innerHeight","width","height","setup","id","themes","sea","backgroundColor","fontColor","light","lilac","mint","dark","ThemesContext","createContext","ThemeSelector","useContext","ThemeContext","theme","setTheme","toggleTheme","e","preventDefault","target","dataset","value","localStorage","APP_THEME","className","Object","keys","map","color","data-value","onClick","App","GlobalStyle","createGlobalStyle","props","ThemesProvider","children","useState","useMemo","Provider","ReactDOM","render","StrictMode"],"mappings":"kLAmEeA,EAhED,WACZ,IAAIC,EAAQC,EAERC,EAAQC,EAERC,EAAY,GACZC,EAAQ,EAENC,EAAc,WAKlB,IAJA,IAAMC,EAAQN,EAAIO,gBAAgBN,EAAQC,GACpCM,EAAW,IAAIC,YAAYH,EAAMI,KAAKC,QACtCC,EAAMJ,EAASK,OAEZC,EAAI,EAAGA,EAAIF,EAAKE,IACnBC,KAAKC,SAAW,KAClBR,EAASM,GAAK,YAIlBX,EAAUc,KAAKX,IAaXY,EAAO,SAAPA,IATU,IAAVd,EACFA,EAAQ,EAERA,IAGFJ,EAAImB,aAAahB,EAAUC,GAAQ,EAAG,GAMtCgB,OAAOC,YAAW,WAChBD,OAAOE,sBAAsBJ,KAC5B,KAwBL,OAPAK,qBAAU,WACRxB,EAASyB,SAASC,eAAe,SACjCzB,EAAMD,EAAO2B,WAAW,MAhBZ,WACZzB,EAASmB,OAAOO,WAChBzB,EAAUkB,OAAOQ,YAEjB7B,EAAO8B,MAAQ5B,EACfF,EAAO+B,OAAS5B,EAEhB,IAAK,IAAIY,EAAI,EAAGA,EAAI,GAAIA,IACtBT,IAGFa,IAOAa,KACC,IAEI,wBAAQC,GAAG,WC9DPC,EAAS,CACpBC,IAAK,CACHC,gBAAiB,2BACjBC,UAAW,uBAEbC,MAAO,CACLF,gBAAiB,4BACjBC,UAAW,oBAEbE,MAAO,CACLH,gBAAiB,2BACjBC,UAAW,uBAEbG,KAAM,CACJJ,gBAAiB,2BACjBC,UAAW,uBAEbI,KAAM,CACJL,gBAAiB,yBACjBC,UAAW,wBAKAK,EADOC,wBAAc,MCGrBC,EAzBO,WAAO,IAAD,EACEC,qBAAWC,GAA/BC,EADkB,EAClBA,MAAOC,EADW,EACXA,SAETC,EAAc,SAACC,GACnBA,EAAEC,iBACEJ,IAAUG,EAAEE,OAAOC,QAAQC,QAC7BN,EAASE,EAAEE,OAAOC,QAAQC,OAC1BC,aAAaC,UAAYN,EAAEE,OAAOC,QAAQC,QAI9C,OACE,qBAAKG,UAAU,iBAAf,SACGC,OAAOC,KAAKzB,GAAQ0B,KAAI,SAACC,EAAO9C,GAAR,OACvB,qBAEE0C,UAAS,oBAAeI,GACxBC,aAAYD,EACZE,QAASd,GAHJlC,SCJAiD,EAVH,WACV,OACE,qCACE,cAAC,EAAD,IACA,+CACA,cAAC,EAAD,Q,sBCuCSC,EA7CKC,YAAH,o0BAEO,SAACC,GAAD,OAAWA,EAAMpB,MAAMX,mBAClC,SAAC+B,GAAD,OAAWA,EAAMpB,MAAMV,YAwBRH,EAAOM,KAAKJ,gBAGZF,EAAOK,MAAMH,gBAGbF,EAAOC,IAAIC,gBAGXF,EAAOI,MAAMF,gBAGbF,EAAOO,KAAKL,iBCfzBgC,EAtBQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACbC,mBAAS,OADI,mBAChCvB,EADgC,KACzBC,EADyB,KAGjCM,EAAQiB,mBAAQ,iBAAO,CAAExB,QAAOC,cAAa,CAACD,EAAOC,IAS3D,OAPAxB,qBAAU,WACJ+B,aAAaC,WACfR,EAASO,aAAaC,aAGvB,IAGD,cAAC,EAAcgB,SAAf,CAAwBlB,MAAOA,EAA/B,SACE,eAAC,IAAD,CAAeP,MAAOb,EAAOoB,EAAMP,OAAnC,UACE,cAAC,EAAD,IACCsB,QCdTI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJlD,SAASC,eAAe,W","file":"static/js/main.8a4e0cdd.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from \"react\";\n\nconst Grain = () => {\n  let canvas, ctx;\n\n  let wWidth, wHeight;\n\n  let noiseData = [];\n  let frame = 0;\n\n  const createNoise = () => {\n    const idata = ctx.createImageData(wWidth, wHeight);\n    const buffer32 = new Uint32Array(idata.data.buffer);\n    const len = buffer32.length;\n\n    for (let i = 0; i < len; i++) {\n      if (Math.random() < 0.5) {\n        buffer32[i] = 0xff000000;\n      }\n    }\n\n    noiseData.push(idata);\n  };\n\n  const paintNoise = () => {\n    if (frame === 9) {\n      frame = 0;\n    } else {\n      frame++;\n    }\n\n    ctx.putImageData(noiseData[frame], 0, 0);\n  };\n\n  const loop = () => {\n    paintNoise(frame);\n\n    window.setTimeout(() => {\n      window.requestAnimationFrame(loop);\n    }, 1000 / 25);\n  };\n\n  const setup = () => {\n    wWidth = window.innerWidth;\n    wHeight = window.innerHeight;\n\n    canvas.width = wWidth;\n    canvas.height = wHeight;\n\n    for (let i = 0; i < 10; i++) {\n      createNoise();\n    }\n\n    loop();\n  };\n\n  useEffect(() => {\n    canvas = document.getElementById(\"noise\");\n    ctx = canvas.getContext(\"2d\");\n\n    setup();\n  }, []);\n\n  return <canvas id='noise' />;\n};\n\nexport default Grain;\n","import { createContext } from \"react\";\n\nexport const themes = {\n  sea: {\n    backgroundColor: \"rgba(107, 202, 226, 0.9)\",\n    fontColor: \"rgba(247, 247, 247)\",\n  },\n  light: {\n    backgroundColor: \"rgba(247, 247, 247, 0.99)\",\n    fontColor: \"rgba(64, 64, 64)\",\n  },\n  lilac: {\n    backgroundColor: \"rgba(173, 143, 219, 0.9)\",\n    fontColor: \"rgba(247, 247, 247)\",\n  },\n  mint: {\n    backgroundColor: \"rgba(111, 220, 191, 0.9)\",\n    fontColor: \"rgba(247, 247, 247)\",\n  },\n  dark: {\n    backgroundColor: \"rgba(64, 64, 64, 0.99)\",\n    fontColor: \"rgba(247, 247, 247)\",\n  },\n};\n\nconst ThemesContext = createContext(null);\nexport default ThemesContext;\n","import React, { useContext } from \"react\";\nimport ThemeContext, { themes } from \"../stores/contexts/themes.context\";\n\nconst ThemeSelector = () => {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  const toggleTheme = (e) => {\n    e.preventDefault();\n    if (theme !== e.target.dataset.value) {\n      setTheme(e.target.dataset.value);\n      localStorage.APP_THEME = e.target.dataset.value;\n    }\n  };\n\n  return (\n    <div className='theme-selector'>\n      {Object.keys(themes).map((color, i) => (\n        <div\n          key={i}\n          className={`btn-color ${color}`}\n          data-value={color}\n          onClick={toggleTheme}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default ThemeSelector;\n","import React from \"react\";\nimport Grain from \"./components/Grain\";\nimport ThemeSelector from \"./components/ThemeSelector\";\n\nconst App = () => {\n  return (\n    <>\n      <Grain />\n      <h1>Hellooo World</h1>\n      <ThemeSelector />\n    </>\n  );\n};\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\nimport { themes } from \"../stores/contexts/themes.context\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: ${(props) => props.theme.backgroundColor};\n    color: ${(props) => props.theme.fontColor};\n  }\n\n  .theme-selector {\n    position: absolute;\n    padding: 0.5rem 1rem;\n    top: 0;\n    right: 2rem;\n    border-bottom-right-radius: 1rem;\n    border-bottom-left-radius: 1rem;\n    background-color: white;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 5px;\n\n    .btn-color {\n      width: 20px;\n      height: 20px;\n      border-radius: 20px;\n      background-color: lightgray;\n      cursor: pointer;\n\n      &.mint {\n        background-color: ${themes.mint.backgroundColor}\n      }\n      &.lilac {\n        background-color: ${themes.lilac.backgroundColor}\n      }\n      &.sea {\n        background-color: ${themes.sea.backgroundColor}\n      }\n      &.light {\n        background-color: ${themes.light.backgroundColor}\n      }\n      &.dark {\n        background-color: ${themes.dark.backgroundColor}\n      }\n    }\n  }\n`;\n\nexport default GlobalStyle;\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport ThemesContext, { themes } from \"../contexts/themes.context\";\nimport { ThemeProvider } from \"styled-components\";\nimport GlobalStyle from \"../../styles/GlobalStyle.style\";\n\nconst ThemesProvider = ({ children }) => {\n  const [theme, setTheme] = useState(\"sea\");\n\n  const value = useMemo(() => ({ theme, setTheme }), [theme, setTheme]);\n\n  useEffect(() => {\n    if (localStorage.APP_THEME) {\n      setTheme(localStorage.APP_THEME);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <ThemesContext.Provider value={value}>\n      <ThemeProvider theme={themes[value.theme]}>\n        <GlobalStyle />\n        {children}\n      </ThemeProvider>\n    </ThemesContext.Provider>\n  );\n};\n\nexport default ThemesProvider;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport App from \"./App\";\n\nimport ThemesProvider from \"./stores/providers/themes.provider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemesProvider>\n      <App />\n    </ThemesProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}